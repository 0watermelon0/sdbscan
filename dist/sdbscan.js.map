{"version":3,"sources":["sdbscan.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","$","sdbscan","window","eudist","v1","v2","sqrt","len","sum","d","Math","mandist","abs","dist","Distance","DBScan","data","eps","min","_multi","_data","initData","_eps","_min","ret","multi","push","v","visited","idx","k","p","region","id","np","pop","newRegion","regionQuery","concat","kid","ks","noise","unvisited","expandCluster","forEach","map","clusters","dbscan"],"mappings":"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","file":"sdbscan.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\n\r\n(function($) {\r\n\tvar sdbscan = require(\"./main.js\");\r\n\t$.sdbscan = sdbscan;\r\n})(window);\r\n\n},{\"./main.js\":3}],2:[function(require,module,exports){\nmodule.exports = {\r\n\t/**\r\n\t * Euclidean distance\r\n\t */\r\n\teudist(v1,v2,sqrt) {\r\n\t\tvar len = v1.length;\r\n\t\tvar sum = 0;\r\n\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\r\n\t\t\tsum += d*d;\r\n\t\t}\r\n\t\t// Square root not really needed\r\n\t\treturn sqrt? Math.sqrt(sum) : sum;\r\n\t},\r\n\r\n\tmandist(v1,v2,sqrt) {\r\n\t\tvar len = v1.length;\r\n\t\tvar sum = 0;\r\n\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tsum += Math.abs((v1[i]||0) - (v2[i]||0));\r\n\t\t}\r\n\r\n\t\t// Square root not really needed\r\n\t\treturn sqrt? Math.sqrt(sum) : sum;\r\n\t},\r\n\r\n\t/**\r\n\t * Unidimensional distance\r\n\t */\r\n\tdist(v1,v2,sqrt) {\r\n\t\tvar d = Math.abs(v1-v2);\r\n\t\treturn sqrt? d : d*d;\r\n\t}\r\n\r\n}\r\n\n},{}],3:[function(require,module,exports){\nconst\r\n\tDistance = require(\"./distance.js\"),\r\n\teudist = Distance.eudist;\r\n\r\n/*\r\nDBSCAN(D, epsilon, min_points):\r\n      C = 0\r\n      for each unvisited point P in dataset\r\n            mark P as visited\r\n            sphere_points = regionQuery(P, epsilon)\r\n            if sizeof(sphere_points) < min_points\r\n                  ignore P\r\n            else\r\n                  C = next cluster\r\n                  expandCluster(P, sphere_points, C, epsilon, min_points)\r\n\r\nexpandCluster(P, sphere_points, C, epsilon, min_points):\r\n      add P to cluster C\r\n      for each point P’ in sphere_points\r\n            if P’ is not visited\r\n                  mark P’ as visited\r\n                  sphere_points’ = regionQuery(P’, epsilon)\r\n                  if sizeof(sphere_points’) >= min_points\r\n                        sphere_points = sphere_points joined with sphere_points’\r\n                  if P’ is not yet member of any cluster\r\n                        add P’ to cluster C\r\n\r\nregionQuery(P, epsilon):\r\n      return all points within the n-dimensional sphere centered at P with radius epsilon (including P)\r\n*/\r\n\r\nclass DBScan {\r\n\tconstructor(data,eps,min) {\r\n\t\tthis._multi = data[0].length>0;\r\n\t\tthis._data = this.initData(data);\r\n\t\tthis._eps = eps;\r\n\t\tthis._min = min;\r\n\t}\r\n\r\n\tinitData(data) {\r\n\t\tlet ret = [], len = data.length;\r\n\t\tlet multi = this._multi;\r\n\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tret.push({v:multi? data[i] : [data[i]], visited:false, idx:i, k:0});\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tregionQuery(p) {\r\n\t\tlet\teps = this._eps, data = this._data,\r\n\t\t\t\tret = [], len = data.length;\r\n\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tif(eudist(data[i].v,p.v,true) <= eps)\r\n\t\t\t\tret.push(data[i]);\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\texpandCluster(p, region, k) {\r\n\t\tlet eps = this._eps, data = this._data, min = this._min;\r\n\r\n\t\t// Add p to cluster k\r\n\t\tp.k = k.id;\r\n\t\tk.data.push(p.v);\r\n\r\n\t\twhile(region.length) {\r\n\t\t\tlet np = region.pop();\r\n\t\t\tif(!np.visited) {\r\n\t\t\t\tnp.visited = true;\r\n\t\t\t\tlet newRegion = this.regionQuery(np);\r\n\t\t\t\tif(newRegion.length >= min) {\r\n\t\t\t\t\tregion = region.concat(newRegion);\r\n\t\t\t\t}\r\n\t\t\t\tif(!np.k) {\r\n\t\t\t\t\tnp.k = k.id;\r\n\t\t\t\t\tk.data.push(np.v);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdbscan() {\r\n\t\tlet data = this._data, min = this._min,\r\n\t\t\t\tkid = 0,\r\n\t\t\t\tks = [],\t\t// Clusters\r\n\t\t\t\tnoise = [],\t// Noise\r\n\t\t\t\tk = null;\t\t// Current cluster\r\n\r\n\t\t// Unvisited points\r\n\t\tvar unvisited = [].concat(data);\r\n\r\n\t\twhile(unvisited.length) {\r\n\t\t\tlet p = unvisited.pop();\r\n\t\t\tif(!p.visited) {\r\n\t\t\t\t// Mark as visited\r\n\t\t\t\tp.visited = true;\r\n\r\n\t\t\t\t// Get the reachable region for this point\r\n\t\t\t\tlet region = this.regionQuery(p);\r\n\r\n\t\t\t\t// Too small region\r\n\t\t\t\tif(region.length<min) {\r\n\t\t\t\t\tnoise.push(p);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tk = {id:kid++, data:[]};\r\n\t\t\t\t\tks.push(k);\r\n\t\t\t\t\tthis.expandCluster(p, region, k);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Restore unidimiensional data that was transformed to\r\n\t\t// multidimensional for the algoryth purposes\r\n\t\tif(!this._multi) {\r\n\t\t\tks.forEach(k=>{\r\n\t\t\t\tk.data = k.data.map(v=>v[0]);\r\n\t\t\t});\r\n\t\t\tnoise.forEach(p=>p.v=p.v[0]);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tnoise : noise.map(p=>p.v),\r\n\t\t\tclusters : ks\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = function(data,eps,min) {\r\n\treturn (new DBScan(data,eps,min)).dbscan();\r\n}\r\n\n},{\"./distance.js\":2}]},{},[1]);\n"]}